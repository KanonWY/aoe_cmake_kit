# --------------------------------------------------------------------------------------------------------------
# Use ros.
#
# 两种模式择一使用：
# Choose one of the two modes to use：
#
#   1. 将本工程作为 ros package 使用，可导入给定的其他 ros package 依赖，并处理位于工程根目录下的
#      msg, srv, action 目录下的 msg 文件、srv 文件、action 文件。
#      Use this project as a ros package, import the given other ros packages as dependencies,
#      and process the msg, srv, action files located in the msg, srv, action directories
#      in the project root directory.
#
#   2. 将一个给定目录初始化为 ros 工作空间，并把添加为本工程的子目录。
#      Initialize a given directory as a ros workspace and add it as a subdirectory of this project.
#
# ros 的版本可手动设置，或者自动从环境变量中获取。
# The version of ros can be set manually or automatically retrieved from an environment variable.
# --------------------------------------------------------------------------------------------------------------
# aoe_use_ros(target
#   < AS_IS
#     [IMPORTS <other ros package> ...]
#   | AT <path>
#   >
#   < VERSION             <number>
#   | VERSION_FROM_ENV
#   | VERSION_FROM_ENV_OR <number>
#   >
# )
#
# target: 生成一个接口目标，用于设置 AS_IS 模式下导入的依赖，或设置 AT 模式下由工作空间内的 ros package 生成的头文件。
#         Generate an interface target for setting up dependencies imported in AS_IS mode,
#         or headers generated by the ros packages in the workspace in AT mode.
# --------------------------------------------------------------------------------------------------------------
# AS_IS: 选择将本工程作为 ros package 使用。
#        Choose to use this project as a ros package.
#
# IMPORTS: AS_IS 模式下，需要被导入的其他 ros package.
#          Other ros packages to be imported in AS_IS mode.
#
# AT: 初始化一个给定目录为 ros 工作空间，并将其挂载到本工程下。
#
# VERSION: 手动指定 ros 的版本（1 或 2）。
#          Manually specified ros' version (1 or 2)
#
# VERSION_FROM_ENV: 从环境变量中自动获取 ros 版本（也即，通过 source ros 的 setup 脚本导入的）。
#                   Automatically get the ros version from the environment variable
#                   (i.e., imported via the source ros setup script).
#
# VERSION_FROM_ENV_OR: 尝试从环境变量中获取 ros 版本，如果获取不到，则使用给定的版本号。
#                      Try to get the ros version from the environment variable,
#                      and if can't, use the given version number.
# --------------------------------------------------------------------------------------------------------------

macro(aoe_use_ros target)
    # 解析参数
    cmake_parse_arguments(__aoe_use_ros_config "AS_IS;VERSION_FROM_ENV" "AT;VERSION;VERSION_FROM_ENV_OR" "IMPORTS" ${ARGN})
    aoe_disable_unknown_params(__aoe_use_ros_config)
    aoe_expect_one_of_params(__aoe_use_ros_config AS_IS AT)
    aoe_expect_one_of_params(__aoe_use_ros_config VERSION VERSION_FROM_ENV VERSION_FROM_ENV_OR)
    aoe_expect_related_param(__aoe_use_ros_config AS_IS IMPORTS)

    # 获取 ros 版本
    if (${__aoe_use_ros_config_VERSION_FROM_ENV})
        set(__aoe_use_ros_config_VERSION $ENV{ROS_VERSION})

        if ("${__aoe_use_ros_config_VERSION}" STREQUAL "")
            message(FATAL_ERROR "Failed to get ros version from environment !")
        endif ()
    elseif (DEFINED __aoe_use_ros_config_VERSION_FROM_ENV_OR)
        set(__aoe_use_ros_config_VERSION $ENV{ROS_VERSION})

        if ("${__aoe_use_ros_config_VERSION}" STREQUAL "")
            set(__aoe_use_ros_config_VERSION ${__aoe_use_ros_config_VERSION_FROM_ENV_OR})
        endif ()
    endif ()
    
    # 根据参数，选择不同的使用方式
    if (${__aoe_use_ros_config_AS_IS})
        __aoe_use_ros_as_is(${target} ${__aoe_use_ros_config_VERSION} ${__aoe_use_ros_config_IMPORTS})
    else ()
        __aoe_use_ros_at(${target} ${__aoe_use_ros_config_AT} ${__aoe_use_ros_config_VERSION})
    endif ()

    # 记录使用的 ros 版本
    __aoe_project_property(ROS_VERSION SET ${__aoe_use_ros_config_VERSION})
endmacro()
