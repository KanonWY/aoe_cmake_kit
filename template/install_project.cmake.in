# --------------------------------------------------------------------------------------------------------------
# 用于生成工程的 cmake_install.cmake 的模板文件。
# --------------------------------------------------------------------------------------------------------------
# 将使用的模板变量：
#
# PROJECT_NAME：Name of the project
#
# default_libraries：本工程内默认导出的库目标。
#
# basic_libraries：本工程内一定会导出的基础库目标。
#
# relative_install_root：本工程被安装的根目录，相对于本配置文件被安装的目录的相对目录。
#
# module_paths：随本工程一起安装的第三方库的配置文件，相对于安装根目录的所在目录。
# --------------------------------------------------------------------------------------------------------------

if (CMAKE_VERSION VERSION_LESS 2.6.0)
    message(FATAL_ERROR "@PROJECT_NAME@ requires at least CMake version 2.6.0")
endif()

# -------------------------------------------------------------
## 设置需要导入的本工程组件

# 若用户没有指定组件，则优先导入工程设置默认组件
if (NOT @PROJECT_NAME@_FIND_COMPONENTS)
    if (NOT "@default_libraries@" STREQUAL "")
        list(APPEND @PROJECT_NAME@_FIND_COMPONENTS "@default_libraries@")
    endif ()
endif()

# 导入本工程的基础组件
if (NOT "@basic_libraries@" STREQUAL "")
    list(APPEND @PROJECT_NAME@_FIND_COMPONENTS "@basic_libraries@")
endif ()

# 要求一定要导入至少一个组件
if (NOT @PROJECT_NAME@_FIND_COMPONENTS)
    set(@PROJECT_NAME@_NOT_FOUND_MESSAGE "The @PROJECT_NAME@ package requires at least one component.")
    set(@PROJECT_NAME@_FOUND False)
    return()
endif ()

# -------------------------------------------------------------
## 执行自定义的前处理 cmake 流程

file(GLOB _@PROJECT_NAME@_prefix_cmake_files ${CMAKE_CURRENT_LIST_DIR}/extra/prefix/*.cmake)

foreach(cmake_file ${_@PROJECT_NAME@_prefix_cmake_files})
    include(${cmake_file})
endforeach()

# -------------------------------------------------------------
## 设置导入配置选项

# 设置 REQUIRED 参数
set(_@PROJECT_NAME@_FIND_PARTS_REQUIRED)

if (@PROJECT_NAME@_FIND_REQUIRED)
    set(_@PROJECT_NAME@_FIND_PARTS_REQUIRED REQUIRED)
endif()

# 设置 QUIET 参数
set(_@PROJECT_NAME@_FIND_PARTS_QUIET)

if (@PROJECT_NAME@_FIND_QUIETLY)
    set(_@PROJECT_NAME@_FIND_PARTS_QUIET QUIET)
endif()

# -------------------------------------------------------------
## 设置本工程的组件搜索路径，以及本地第三方库的搜索路径

# 设置搜索路径为 @PROJECT_NAME@Config.cmake 所在的目录，但不能影响默认的 cmake 搜索目录：
get_filename_component(_@PROJECT_NAME@_install_prefix "${CMAKE_CURRENT_LIST_DIR}" ABSOLUTE)

set(_@PROJECT_NAME@_CMAKE_PREFIX_PATH_old ${CMAKE_PREFIX_PATH})
set(CMAKE_PREFIX_PATH "${_@PROJECT_NAME@_install_prefix}" "${_@PROJECT_NAME@_install_prefix}/targets")

# 追加本工程模块以及其他第三方模块搜索路径
set(_@PROJECT_NAME@_CMAKE_MODULE_PATH_old ${CMAKE_MODULE_PATH})

list(APPEND CMAKE_MODULE_PATH "${_@PROJECT_NAME@_install_prefix}" "${_@PROJECT_NAME@_install_prefix}/targets")

foreach(module_path @module_paths@)
    get_filename_component(
        _@PROJECT_NAME@_one_module_path
        "${CMAKE_CURRENT_LIST_DIR}/@relative_install_root@/${module_path}"
        ABSOLUTE)

    list(APPEND CMAKE_PREFIX_PATH ${_@PROJECT_NAME@_one_module_path})

    unset(_@PROJECT_NAME@_one_module_path)
endforeach()

# -------------------------------------------------------------
## 导入指定组件

# 开始搜索指定组件，并且记录相关信息
set(_@PROJECT_NAME@_NOT_FOUND_MESSAGE)
set(_@PROJECT_NAME@_COMPONENTS_LIBRARIES)

foreach(module ${@PROJECT_NAME@_FIND_COMPONENTS})
    # 寻找指定组件
    find_package(${module}
        ${_@PROJECT_NAME@_FIND_PARTS_QUIET}
        ${_@PROJECT_NAME@_FIND_PARTS_REQUIRED}
        PATHS "${_@PROJECT_NAME@_install_prefix}/targets"
        NO_DEFAULT_PATH
        )

    list(APPEND _@PROJECT_NAME@_COMPONENTS_LIBRARIES @project_namespace@@PROJECT_NAME@::${module})

    # 若找不到指定组件时，处理错误信息与警告信息
    if (NOT ${module}_FOUND)
        set(_@PROJECT_NAME@_${module}_NOT_FOUND_MESSAGE
            "Failed to find @PROJECT_NAME@ component [${module}] config file "
            "at [${_@PROJECT_NAME@_install_prefix}/targets/${module}Config.cmake]")

        if (@PROJECT_NAME@_FIND_REQUIRED_${module})
            set(_@PROJECT_NAME@_NOT_FOUND_MESSAGE
                "${_@PROJECT_NAME@_NOT_FOUND_MESSAGE}${_@PROJECT_NAME@_${module}_NOT_FOUND_MESSAGE}\n")
        elseif(NOT @PROJECT_NAME@_FIND_QUIETLY)
            message(WARNING "${_@PROJECT_NAME@_${module}_NOT_FOUND_MESSAGE}")
        endif ()

        unset(_@PROJECT_NAME@_${module}_NOT_FOUND_MESSAGE)
    endif ()

    # 为了向后兼容，需要设置 LIBRARIES 变量
    list(APPEND @PROJECT_NAME@_LIBRARIES "@project_namespace@@PROJECT_NAME@::${module}")
endforeach()

# -------------------------------------------------------------
## 复原 cmake 变量

set(CMAKE_PREFIX_PATH ${_@PROJECT_NAME@_CMAKE_PREFIX_PATH_old})
set(CMAKE_MODULE_PATH ${_@PROJECT_NAME@_CMAKE_MODULE_PATH_old})

# -------------------------------------------------------------
## 处理最后的查询结果

if (_@PROJECT_NAME@_NOT_FOUND_MESSAGE)
    set(@PROJECT_NAME@_NOT_FOUND_MESSAGE "${_@PROJECT_NAME@_NOT_FOUND_MESSAGE}")
    set(@PROJECT_NAME@_FOUND False)
else()
    if (NOT TARGET @project_namespace@@PROJECT_NAME@)
        add_library(@project_namespace@@PROJECT_NAME@ IMPORTED INTERFACE)
    endif()

    target_link_libraries(@project_namespace@@PROJECT_NAME@ INTERFACE ${_@PROJECT_NAME@_COMPONENTS_LIBRARIES})
    set(@PROJECT_NAME@_FOUND True)
endif ()

# -------------------------------------------------------------
## 执行自定义的后处理 cmake 流程

file(GLOB _@PROJECT_NAME@_pose_cmake_files
    ${CMAKE_CURRENT_LIST_DIR}/extra/post/*.cmake)

foreach(cmake_file ${_@PROJECT_NAME@_pose_cmake_files})
    include(${cmake_file})
endforeach()

# -------------------------------------------------------------
## 清除临时变量

unset(_@PROJECT_NAME@_FIND_PARTS_REQUIRED)
unset(_@PROJECT_NAME@_FIND_PARTS_QUIET)
unset(_@PROJECT_NAME@_CMAKE_PREFIX_PATH_old)
unset(_@PROJECT_NAME@_CMAKE_MODULE_PATH_old)
unset(_@PROJECT_NAME@_NOT_FOUND_MESSAGE)
unset(_@PROJECT_NAME@_COMPONENTS_LIBRARIES)
unset(_@PROJECT_NAME@_install_prefix)
unset(_@PROJECT_NAME@_prefix_cmake_files)
unset(_@PROJECT_NAME@_pose_cmake_files)
